name: version
on:
  push:
    tags:
      - '*'

jobs:
  version:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v1

      - name: Test Build Stack
        run: docker-compose up -d --build
      - name: Test OnStart
        run: docker-compose exec -T snowebsvg_app python manage.py on_start --settings=settings.production
      - name: Test Django
        run: docker-compose exec -T snowebsvg_app python manage.py test --settings=settings.production
      - name: ECR Configure credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-3
      - name: ECR Login
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: ECR Build tag and push image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: snowebsvg
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      - name: Deployment
        uses: appleboy/ssh-action@master
        env:
          SHA: ${{ github.sha }}
        with:
          host: www.snoweb-svg.com
          username: debian
          key: ${{ secrets.KEY }}
          port: 22
          command_timeout: 200m
          envs: SHA
          script: |
            sudo $(aws ecr get-login --region eu-west-3 --profile=snowpark --no-include-email)
            cd /home/debian/compose/snowebsvg
            sudo SHA=$SHA docker-compose up --force-recreate --build -d --remove-orphans
            sudo docker exec snowebsvg_app python manage.py on_start --settings=settings.production
            yes | sudo docker image prune -a
